/*
 * ecp_acq.c
 *
 *  Created on: Jan 31, 2011
 *      Author: wibble
 */

#define _GNU_SOURCE

#include <pthread.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <sys/mman.h>
#include <sys/resource.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <signal.h>
#include <sys/time.h>
#include <unistd.h>
#include <math.h>

#include "qusb_errors.h"
#include "qusb_helpers.h"
#include "simple_fifo.h"
#include "qusb_acq.h"
#include <QuickUSB.h>

static bool running = true;

int main(int argc, char **argv) {
	/*QRETURN  variables*/
	/* ret: the return of a QuickUSB function*/
	QRETURN ret;

	/* QCHAR variables*/
	/*port_names: a null-delimted string of QuickUSB  device addresses returned by QuickUsbFindModules*/
	/*port_l: a list of Quick USB device addresses*/
	QCHAR *port_names;
    struct qusb_opt o;

	/*int varibles*/
	/*num_ports: the total number of QuickUSB modules found. This is returned from qusb_parse_ports*/

	init_opt(&o);
	parse_opt(&o, argc, argv);

	struct module_list portl;
	memset(&portl, 0, sizeof(struct module_list));

    signal(SIGINT, do_depart);

    /* We are important */
/*    ret = setpriority(PRIO_PROCESS,0,-19);
    if (ret) fprintf(stderr,"  WARNING!! Data collection could not set high priority.\n");
	else {
		ret = getpriority(PRIO_PROCESS, 0);
		printf("I've been niced to %i.\n",ret);
	}*/

	/* Allocate memory for module names */
	port_names = malloc(100000 * sizeof(char));

	/* Find the usb modules. If no modules are found, print an error */
    ret = QuickUsbFindModules(port_names,100000);
    if (ret == 0 ) printf("No modules found!\n");
    if (o.verbose) printf("portnames: @%s@\n",port_names);
	
	/* Parse the return of QuickUsbFindModules */
	qusb_parse_ports(port_names, &portl, &o);
	printf("Modules parsed, found %i.\n", portl.portc);
	if (portl.portc < 1) {
        printf("No QuickUSB modules found.\n");
        return(ret);
    }

    if (o.mport > portl.portc) {
        fprintf(stderr, "Invalid number of modules specified (%i): found %i.\n", o.mport, portl.portc);
        exit(EEPP_BADOPT);
    }

    qusb_mport(o, portl);

}

void qusb_mport(struct qusb_opt o, struct module_list  portl) {
	time_t pg_time;
	int tret, ret, rtdsize = 0;
	struct qusb_ptargs *thread_args;
	pthread_t *data_threads;
//	pthread_t rtd_thread;

	short int **rtdframe, **rtdsave, *rtdout = NULL;
	struct header_info header;
	int rfd, active_threads = 0;
	char *rmap = NULL, lstr[1024];
	struct stat sb;
	pthread_mutex_t *rtdlocks;
	double telapsed;
	struct timeval now, then;

	pg_time = time(NULL);
	sprintf(lstr, "%s/%s", o.outdir, o.prefix);
	qusb_log(lstr, pg_time);
	qusb_log("Dartmouth College RxDSP parallel port acquisition, started %s", ctime(&pg_time));

	data_threads = malloc(o.mport * sizeof(pthread_t));
	rtdlocks = malloc(o.mport * sizeof(pthread_mutex_t));
	thread_args = malloc(o.mport * sizeof(struct qusb_ptargs));
	rtdframe = malloc(o.mport * sizeof(short int *));
	rtdsave  = malloc(o.mport * sizeof(short int *));

	printf("Found %i ports, init...",portl.portc);

	if (o.dt > 0) {
		printf("RTD...");

		rtdsize = o.rtdsize * o.rtdavg * sizeof(short int);
		if (rtdsize > o.cfsize*sizeof(short int)-200) {
			printf("RTD Total Size too big!\n");
		}

		rtdout = malloc(o.mport * rtdsize);

		if ((rtdframe == NULL) || (rtdsave == NULL) || (rtdout == NULL)) {
			printe("RTD mallocs failed.\n");
		}

		for (int i = 0; i < o.mport; i++) {
			rtdframe[i] = malloc(rtdsize);
			rtdsave[i] = malloc(rtdsize);
		}

		/*
		 * Create/truncate the real-time display file, fill it
		 * with zeros to the desired size, then mmap it.
		 */
		rfd = open(o.rtdfile,
				O_RDWR|O_CREAT|O_TRUNC,
				S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH);
		if (rfd == -1) {
			printe("Failed to open rtd file.\n"); return;
		}
		if ((fstat(rfd, &sb) == -1) || (!S_ISREG(sb.st_mode))) {
			printe("Improper rtd file.\n"); return;
		}
		int mapsize = o.mport*rtdsize + 100;
		char *zeroes = malloc(mapsize);
		memset(zeroes, 0, mapsize);
		ret = write(rfd, zeroes, mapsize);
		free(zeroes);
//		printf("mmap, %i",rfd);fflush(stdout);
		rmap = mmap(0, mapsize, PROT_WRITE|PROT_READ, MAP_SHARED, rfd, 0);
		if (rmap == MAP_FAILED) {
			printe("mmap() of rtd file failed.\n"); return;
		}
//		printf("postmmap");fflush(stdout);
		ret = close(rfd);
		madvise(rmap, mapsize, MADV_WILLNEED);

		/*
		 * Set up basic RTD header
		 */
	    header.num_read = o.rtdsize*o.mport;
	    sprintf(header.site_id,"%s","RxDSP Woot?");
	    header.hkey = 0xF00FABBA;
	    header.num_channels=o.mport;
	    header.channel_flags=0x0F;
	    header.num_samples=o.rtdsize;
	    header.sample_frequency=1000000;
	    header.time_between_acquisitions=o.dt;
	    header.byte_packing=0;
	    header.code_version=0.1;
	}

	/*
	 * Set up and create the write thread for each QuickUSB module.
	 */
	for (int i = 0; i < o.mport; i++) {
		thread_args[i].np = o.ports[i];

		ret = pthread_mutex_init(&rtdlocks[i], NULL);
		if (ret) {
			printe("RTD mutex init failed: %i.\n", ret); exit(EEPP_THREAD);
		}

		printf("port %i...", o.ports[i]); fflush(stdout);
		thread_args[i].o = o;
		thread_args[i].retval = 0;
		thread_args[i].running = &running;
		thread_args[i].port = portl.portv[o.ports[i]-1];
		thread_args[i].rtdframe = rtdframe[i];
		thread_args[i].rlock = &rtdlocks[i];
		thread_args[i].time = pg_time;
	
		ret = pthread_create(&data_threads[i], NULL, qusb_data_pt, (void *) &thread_args[i]);
		
		if (ret) {
			printe("Failed!: %i.\n", ret); exit(EEPP_THREAD);
		} else active_threads++;
	}

	printf("done.\n"); fflush(stdout);

	if (o.debug) printf("Size of header: %li, rtdsize: %i, o.mport: %i.\n", sizeof(header), rtdsize, o.mport);

	/*
	 * Now we sit back and update RTD data until all data threads quit.
	 */
	gettimeofday(&then, NULL);
	while (active_threads > 0) {
		if (o.dt > 0) {
			gettimeofday(&now, NULL); // Check time
		    telapsed = now.tv_sec-then.tv_sec + 1E-6*(now.tv_usec-then.tv_usec);

		    if (telapsed > o.dt) {
		    	/*
		    	 * Lock every rtd mutex, then just copy in the lock, for speed.
		    	 */
		    	for (int i = 0; i < o.mport; i++) {
		    		pthread_mutex_lock(&rtdlocks[i]);
		    		if (o.debug) printf("rtd moving %i bytes from fr %p to save %p.\n", rtdsize, rtdframe[i], rtdsave[i]);
			    	memmove(rtdsave[i], rtdframe[i], rtdsize);
			    	pthread_mutex_unlock(&rtdlocks[i]);
			    }

		    	// Sort into column-major format?
		    	if (o.rtdcolmaj) {
					for (int i = 0; i < o.mport; i++) {
						for (int j = 0; j < o.rtdsize; j++) {
							rtdout[j*o.mport + i] = rtdsave[i][j];
						}
					}
		    	} else { // No.
		    		for (int i = 0; i < o.mport; i++) {
		    			memmove(&rtdout[o.rtdsize*o.rtdavg*i], rtdsave[i], rtdsize);
		    		}
		    	}

		    	header.start_time = time(NULL);
		    	header.start_timeval = now;
		    	header.averages = o.rtdavg;

		    	memmove(rmap, &header, sizeof(struct header_info));
		    	memmove(rmap+102, rtdout, rtdsize*o.mport);

		    	then = now;
		    }

		}

		/*
		 * Check for any threads that are joinable (i.e. that have quit).
		 */
		for (int i = 0; i < o.mport; i++) {
			ret = pthread_tryjoin_np(data_threads[i], (void *) &tret);

			tret = thread_args[i].retval;
			if (ret == 0) {
				active_threads--;
				if (tret) printf("port %i error: %i...", o.ports[i], tret);
				else printf("port %i clean...", o.ports[i]);
			}
		}

		usleep(50000); // Zzzz...
	}

	/*
	 * Free.  FREE!!!
	 */
	if (o.dt > 0) {
		for (int i = 0; i < o.mport; i++) {
			if (rtdframe[i] != NULL) free(rtdframe[i]);
			if (rtdsave[i] != NULL) free(rtdsave[i]);
		}

		free(rtdsave); free(rtdframe); free(rtdlocks);
		free(thread_args); free(data_threads);
		if (rtdout != NULL) free(rtdout);
	}

	printf("sayonara.\n");

	pthread_exit(NULL);

}

void *qusb_data_pt(void *threadarg) {
	struct qusb_ptargs arg;

	int ret, rtdbytes, cfbytes, avail;
	void *pret;
    double telapsed;
    long long unsigned int frames, count, wcount;
    struct frame_sync sync;
    struct colonel_frame *cframe;
	short int *cfshort;
	char fifo_status, *dataz, ostr[1024];
	struct tm ct;
    struct timeval start, now, then;
    bool fifo_acqseq = false, fifo_firsthalf = true;
	FILE *ofile;
	char *hptr;

	unsigned long ret_err;
	PQULONG ret_err_p = &ret_err;
	QULONG size_commit;
    QHANDLE dev_handle;

    arg = *(struct qusb_ptargs *) threadarg;

    if (arg.o.debug) { printf("Module %i data thread init.\n", arg.np); fflush(stdout); }

	rtdbytes = arg.o.rtdsize*arg.o.rtdavg*sizeof(short int);
	cfbytes = arg.o.cfsize*sizeof(short int);

	dataz = malloc(arg.o.acqsize);
	printf("size of struct: %li, sync: %li\n", sizeof(struct frame_sync), sizeof(sync));

    /* Open the device */
    ret = QuickUsbOpen(&dev_handle, (PQCHAR) arg.port);
    if (ret == 0) {
    	QuickUsbGetLastError(ret_err_p);
    	printe("Cannot open module %i: %li.\n", arg.np, ret_err);
    	arg.retval = ret_err;
    	pthread_exit((void *) &arg.retval);
    }

    /* Set 16-bit data ('word-wide') and 30 MHz IFCLK */
    ret = QuickUsbWriteSetting(dev_handle, 1, 1);
    ret += QuickUsbWriteSetting(dev_handle, 3, 0b0011100010);
    if (ret == 0) {
    	QuickUsbGetLastError(ret_err_p);
    	printf("Failed to write module %i settings: %li.\n", arg.np, ret_err);
    	arg.retval = ret_err;
    	pthread_exit((void *) &arg.retval);
    }

	frames = count = wcount = 0;
	cframe = malloc(sizeof(struct colonel_frame));
	ret = qusb_cfInit(cframe, &arg);
	if (ret) {
		printe("Failed to initialize port %i colonel frame: %i.\n", arg.np, ret);
		arg.retval = ret; pthread_exit((void *) &arg.retval);
	}

	cfshort = (short int *) cframe->base;

	gmtime_r(&arg.time, &ct);
	sprintf(ostr, "%s/%s-%04i%02i%02i-%02i%02i%02i-p%02i.data", arg.o.outdir, arg.o.prefix,
			ct.tm_year+1900, ct.tm_mon+1, ct.tm_mday, ct.tm_hour, ct.tm_min, ct.tm_sec, arg.np);
	ofile = fopen(ostr, "w");
	if (ofile == NULL) {
		fprintf(stderr, "Failed to open output file %s.\n", ostr);
		arg.retval = EEPP_FILE; pthread_exit((void *) &arg.retval);
	}

    gettimeofday(&start, NULL);
    then = start;

    if (arg.o.debug) { printf("Module %i data acquisition start.\n", arg.np); fflush(stdout); }

	/*
     * Main data loop
     */
	while (*arg.running) {
//if (arg.np == 1) { printf("s"); fflush(stdout); }
        check_acq_seq(dev_handle, arg.np, &fifo_acqseq);
/*	    if (arg.o.debug) { printf("Module %i read FIFO status.\n", arg.np); fflush(stdout); }
		size_commit = 1;
		ret = QuickUsbReadPort(dev_handle, 0, (PQBYTE) &fifo_status, (PQWORD) &size_commit);
		if (ret == 0) {
			QuickUsbGetLastError(ret_err_p);
			printe("Failed to read DSP FIFO status from module %i: %li.\n", arg.np, ret_err);
		}
*/
		if (!fifo_acqseq) { // Wait for acquire sequence line
            usleep(50);
            continue;
		}

		fifo_acqseq = false;

		// read
	    if (arg.o.debug) { printf("Module %i read data.\n", arg.np); fflush(stdout); }
		size_commit = arg.o.acqsize;
		ret = QuickUsbReadData(dev_handle, (PQBYTE) dataz, (PQULONG) &size_commit);

//if (arg.np == 1) { printf("r"); fflush(stdout); }
        check_acq_seq(dev_handle, arg.np, &fifo_acqseq);

		if (ret == 0) { // Read error
			QuickUsbGetLastError(ret_err_p);
			printe("Failed to read data from module %i: %li.\n", arg.np, ret_err);
			if (ret_err != 6) { // Timeout error
				arg.retval = ret_err;
				break;
			}
		} else {
			if (size_commit != arg.o.acqsize) {
				qusb_log("Incomplete acquisition!  Got %li bytes.", size_commit);
			}

			count += size_commit;

			// Good read

		    if (arg.o.debug) { printf("Module %i FIFO done.\n", arg.np); fflush(stdout); }

			// copy and write

			// Check DSP header position within FIFO
			// "Dartmouth College "
			// "aDtromtu hoCllge e"
//            if (arg.o.debug) {
            hptr = memmem(dataz, 131072, (void *) "aDtromtu hoCllge e", 18);
//			qusb_log("Bad Colonel Frame Header Shift on module %i, frame %llu: %i.\n", arg.np, hptr-cframe->base, frames);
//    			printe("CFHS on module %i, seq %i: %i.\n", arg.np, frames, hptr-dataz);
//            }

			// Check alternating LSB position within Colonel Frame
/*            if (arg.o.debug) {
    			for (int i = 0; i < 175; i++) {
	    			ret = cfshort[31+i]&0b1;
		   			if (ret) {
		    			ret = i;
			    		break;
				    }
    			}
	    		if (ret != 3) {
		   			qusb_log("Bad LSB Pattern Shift on module %i, frame %llu: %i.\n", arg.np, hptr-dataz, frames);
		    		printe("Bad LSBPS on module %i, frame %llu: %i.\n", arg.np, hptr-dataz, frames);
			    }
            } // if debug*/

			// Build add-on frame header
			memset(&sync, 0, 16);
			strncpy(sync.pattern, "\xFE\x6B\x28\x40", 4);
			sync.t_sec = then.tv_sec-TIME_OFFSET;
			sync.t_usec = then.tv_usec;
			sync.size = size_commit;

//if (arg.np == 1) { printf("b"); fflush(stdout); }
	        check_acq_seq(dev_handle, arg.np, &fifo_acqseq);

			// Write header and frame to disk
			ret = fwrite(&sync, 1, sizeof(struct frame_sync), ofile);
			if (ret != sizeof(struct frame_sync))
				qusb_log("Failed to write sync, port %i: %i.", arg.np, ret);
			ret = fwrite(dataz, 1, size_commit, ofile);
			if (ret != size_commit)
				qusb_log("Failed to write data, port %i: %i.", arg.np, ret);

//if (arg.np == 1) { printf("w"); fflush(stdout); }
	        check_acq_seq(dev_handle, arg.np, &fifo_acqseq);

			wcount += ret;
			if ((arg.o.dt > 0) && (size_commit == arg.o.acqsize)) {
				// Copy into RTD memory if we're running the display

				pthread_mutex_lock(arg.rlock);
				if (arg.o.debug)
					printf("rtd moving rtdbytes %i from cfb %p to rtdb %p with %lu avail.\n",
						rtdbytes, hptr, arg.rtdframe, size_commit);
				memmove(arg.rtdframe, hptr, rtdbytes);
				pthread_mutex_unlock(arg.rlock);
			}

			frames++;
		}
	}

    gettimeofday(&now, NULL);

    /* Close the module */
    ret = QuickUsbClose(dev_handle);
    if (ret == 0) {
    	QuickUsbGetLastError(ret_err_p);
    	printe("Couldn't close module %i: %li.\n", arg.np, ret_err);
    	arg.retval = ret_err;
    }

    telapsed = now.tv_sec-start.tv_sec + 1E-6*(now.tv_usec-start.tv_usec);

	qusb_log("Port %i read %llu bytes in %.4f s: %.4f KBps.", arg.np, count, telapsed, (count/1024.0)/telapsed);
	printf("Port %i read %llu bytes in %.4f s: %.4f KBps.\n", arg.np, count, telapsed, (count/1024.0)/telapsed);

	qusb_log("Port %i wrote %lli bytes in %.4f s: %.4f KBps.", arg.np, wcount, telapsed, (wcount/1024.0)/telapsed);
	printf("Port %i wrote %lli bytes in %.4f s: %.4f KBps.\n", arg.np, wcount, telapsed, (wcount/1024.0)/telapsed);

	arg.retval = 0; pthread_exit((void *) &arg.retval);
}

void check_acq_seq(QHANDLE dev, int np, bool *acq_flag) {
	unsigned long ret_err;
	QBYTE fifo_status;
	QWORD size = 1;
    int ret;

	ret = QuickUsbReadPort(dev, 0, (PQBYTE) &fifo_status, (PQWORD) &size);
	if (ret == 0) {
		QuickUsbGetLastError((PQULONG) &ret_err);
		printe("Failed to read DSP FIFO status for module %i: %li.\n", np, ret_err);
	}

	if (fifo_status & 0b01) {
//        if (np == 1) printf("t");
        *acq_flag = true;
    }
//    else
//        if (np == 1) printf("n");
}

static void do_depart(int signum) {
    running = false;
    fprintf(stderr,"\nStopping...");

    return;
}
